% initialize rng for reproducibility
seed = 2;
rng(seed);

% don't actually run the benchmarks (for debugging purposes)
dry = false;

mpath = mfilename('fullpath');
addpath(fullfile(fileparts(mpath), 'util/'));
datapath = fullfile(fileparts(mpath), 'data/');
outpath = fullfile(fileparts(mpath), 'results/');

if ~isdir(outpath)
  mkdir(outpath)
end

%% Data

% a table with results will be generated for each bin size
bins = [5]; % [5, 10];
nBins = length(bins);

% the number of repetitions
nReps = 20;

datasets = struct(...
  'url', { ...
    'http://www.gatsby.ucl.ac.uk/~chuwei/data/ordinal_diabetes.zip', ...
    'http://www.gatsby.ucl.ac.uk/~chuwei/data/ordinal_pyrimidines.zip', ...
    'http://www.gatsby.ucl.ac.uk/~chuwei/data/ordinal_triazines.zip', ...
    'http://www.gatsby.ucl.ac.uk/~chuwei/data/ordinal_breast.zip', ...
    'http://www.gatsby.ucl.ac.uk/~chuwei/data/ordinal_machine.zip', ...
    'http://www.gatsby.ucl.ac.uk/~chuwei/data/ordinal_autompg.zip', ...
    'http://www.gatsby.ucl.ac.uk/~chuwei/data/ordinal_bostonhousing.zip', ...
    'http://www.gatsby.ucl.ac.uk/~chuwei/data/ordinal_stocksdomain.zip', ...
    'http://www.gatsby.ucl.ac.uk/~chuwei/data/ordinal_abalone.zip' ...
  }, ...
  'name', { ...
    'Diabetes', ...
    'Pyrimidine', ...
    'Triazines', ...
    'Wisconsin', ...
    'Machine', ...
    'AutoMPG', ...
    'Boston', ...
    'Stocks', ...
    'Abalone' ...
  }, ...
  'dirname', { ...
    'Diabetes', ...
    'pyrimidines', ...
    'triazines', ...
    'wisconsin', ...
    'machinecpu', ...
    'Auto-Mpg', ...
    'bostonhousing', ...
    'stocksdomain', ...
    'abalone' ...
  }, ...
  'prefix', { ...
    'diabetes.data', ...
    'pyrim', ...
    'triazines', ...
    'wpbc', ...
    'machine', ...
    'auto.data', ...
    'housing', ...
    'stock', ...
    'abalone' ...
  }, ...
  'dataTr5', cell(1, 9), ...
  'dataTr10', cell(1, 9), ...
  'dataTe5', cell(1, 9), ...
  'dataTe10', cell(1, 9) ...
);

datasets = datasets(1:2);

nDatasets = length(datasets);
downloadData(datapath, datasets);
[datasets, dataInfo] = preprocData(datapath, datasets, bins, nReps);

disp(dataInfo);

%% Tested models
% Tested model settings:

models = struct(...
  'name', ...
    { ...
      'PLSOR_SE' ...
      % 'PLSOR_MATERN_ISO' ...
      % 'PLSOR_SE_ABSERR' ...
      % 'PLSOR_SEARD' ...
    }, ...
  'settings', ...
    { ...
%       { ...
%         'KernelFunction', {@covMaterniso, 5}, ...
%         'KernelParameters', log([0.5; 2]), ...
%         'OptimizerOptions', optimoptions(@fmincon, 'GradObj', 'on', 'Display', 'off', 'Algorithm', 'interior-point') ...
%       }
      { ...
        'KernelFunction', 'squaredexponential', ...
        'OptimizerOptions', optimoptions(@fmincon, 'GradObj', 'on', 'Display', 'off', 'Algorithm', 'interior-point') ...
      } ...
      % {'KernelFunction', 'squaredexponential', 'LossFunction', 'abserr'} ...
      % {'KernelFunction', 'ardsquaredexponential'} ...
    } ...
);

nModels = length(models);

modelsInfo = struct2table(models);

disp(modelsInfo);

%% Statistics

% statistics of crossvalidation trials
statFcns = struct( ...
  'name', {'MCR', 'AbsErr', 'RDE', 'FitTime', 'MinNLP', 'FitTrial'}, ...
  'nargout', {1, 1, 1, 1, 1, 1}, ...
  'fcn', { ...
    @(~, ypred, yte, ~) misclassErr(ypred, yte, 'mcr'), ...
    @(~, ypred, yte, ~) misclassErr(ypred, yte, 'abs'), ...
    @(~, ypred, yte, ~) misclassErr(ypred, yte, 'rde'), ...
    @(~, ~, ~, t) t, ...
    @(mdl, ~, ~, ~) mdl.MinimumNLP, ...
    @(mdl, ~, ~, ~) mdl.OptimTrial ...
  } ...
);

nStatFcns = length(statFcns);

%% Running benchmarks

% a multidimensional result cell array
% the last dimension is for statistics mean vs. std
results = cell(nDatasets, nBins, nModels, nStatFcns, 2);

% testY, predY data (distinguished by the last dimension) for all datasets,
% all bin sizes and all models
resYpred = cell(nDatasets, nBins, nModels, 2);

% data for tables with datasets in rows and all formatted combinations of
% model settings vs. statistics in columns
resTbls = repmat({cell2table(repmat({''}, nDatasets, nModels * nStatFcns + 1))}, ...
  1, nBins);

% variable names for result tables
varNames = cell(1, nModels * nStatFcns + 1);
varNames{1} = 'Dataset';

for binIdx = 1:length(bins)
  bin = bins(binIdx);
  fprintf('Bins: %d\n', bin);

  for datasetIdx = 1:length(datasets)
    dataset = datasets(datasetIdx);
    fprintf('\tDataset: %s\n', dataset.name);

    for modelIdx = 1:length(models)
      model = models(modelIdx);
      fprintf('\t\tModel: %s\n', model.name);

      stats = zeros(nReps, nStatFcns);

      dataTr = dataset.(['dataTr' num2str(bin)]);
      dataTe = dataset.(['dataTe' num2str(bin)]);

      if ~dry
        for rep = 1:nReps
          Xtr = dataTr{rep}{:, 1:end-1};
          Ytr = dataTr{rep}{:, end};
          Xte = dataTe{rep}{:, 1:end-1};
          Yte = dataTe{rep}{:, end};

          if rep == 1
            ypred = zeros(size(Yte, 1), nReps);
            ytest = zeros(size(Yte, 1), nReps);
          end

          [st, out] = testModel(Xtr, Ytr, Xte, Yte, model.settings, statFcns);
          stats(rep, :) = st;
          ytest(:, rep) = Yte;
          ypred(:, rep) = out;
        end
      end

      fmt = repmat({'%.2f'}, 1, length(mean(stats)));
      fmt = strjoin(fmt, ', ');
      fprintf(['\t\tMean stats: ' fmt ' \n'], mean(stats));

      % raw results
      results(datasetIdx, binIdx, modelIdx, :, 1) = num2cell(mean(stats));
      results(datasetIdx, binIdx, modelIdx, :, 2) = num2cell(std(stats));

      % (Yte, Ypred) matrices
      resYpred(datasetIdx, binIdx, modelIdx, 1) = {ytest};
      resYpred(datasetIdx, binIdx, modelIdx, 2) = {ypred};

      % formatted results
      if isempty(resTbls{binIdx}{datasetIdx, 1}{:})
        resTbls{binIdx}{datasetIdx, 1} = {dataset.name};
      end

      for statFcnIdx = 1:nStatFcns
        statFcn = statFcns(statFcnIdx);

        col = (modelIdx - 1) * nStatFcns + statFcnIdx + 1;

        if isempty(varNames{col})
          varNames{col} = sprintf('%s__%s', model.name, statFcn.name);
        end

        resTbls{binIdx}{datasetIdx, col} = {sprintf('%5.2f+/-%4.2f', ...
          mean(stats(:, statFcnIdx)), std(stats(:, statFcnIdx)))};
      end
    end
  end
end

for i = 1:length(resTbls)
  resTbls{i}.Properties.VariableNames = varNames;
end

% save the results into a timestamped file
ts = datestr(now, 'yyyy-mm-ddTHH:MM');
filename = fullfile(outpath, ['benchmark_results_' ts '.mat']);
save(filename, 'bins', 'nReps', 'models', 'modelsInfo', 'datasets', 'dataInfo', ...
  'results', 'resTbls');

%% 5 bins results

disp(resTbls{1});

%% 10 bins results

if length(bins) == 2
  disp(resTbls{2});
end

