function z = crossval(f, X, varargin)
%CROSSVAL Perform a crossvalidation on a function according to a
%cross-validation partitioning.
%   z = CROSSVAL(f, X) run function f on all pairs of training and
%   test sets generated by the cross-validation partitioning cpart.
%   The output z is a matrix of result rows over all cross-validation
%   sets.
%   z = CROSSVAL(__, 'name', 'value') specify partitioning. Currently only
%   leave1out (LOO) partitioning is supported.

  p = inputParser;
  p.addRequired('f', @(x) isa(x, 'function_handle'));
  p.addRequired('X', @isnumeric);
  p.addParameter('leave1out', 1, @(x) x == 1);
  p.parse(f, X, varargin{:});

  n = size(X, 1);
  s = functions(f);

  cpart = crval.CVPartitionLeave1Out(n);

  for i = 1:cpart.NumTestSets;
    if cpart.TestSize(i) > n
      error('Test size %d greater then the data size %d.', cpart.TestSize(i), n);
    elseif cpart.TrainSize(i) > n
      error('Training size %d greater then the data size %d.', cpart.TrainSize(i), n);
    end

    Xtr = X(cpart.training(i), :);
    Xte = X(cpart.test(i), :);

    try
      y = f(Xtr, Xte);
    catch err
      error('The function ''%s'' generated the following error:\n%s',  ...
        s.function, err.message);
    end

    y = reshape(y, 1, numel(y));

    if i == 1
      z = zeros(n, length(y));
    elseif length(y) ~= size(z, 2)
      error('The size of outputs of function ''%s'' must not vary.', ...
        s.function);
    end

    z(i, :) = y;
  end
end

